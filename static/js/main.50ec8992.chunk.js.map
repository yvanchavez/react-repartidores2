{"version":3,"sources":["componentes/Cargando.js","variables/variables.js","paginas/clientes/componentes/ClienteFila.js","paginas/clientes/componentes/ClientesTabla.js","paginas/clientes/componentes/ClienteForm.js","paginas/clientes/Clientes.js","paginas/pedidos/componentes/PedidoFila.js","paginas/pedidos/componentes/PedidosTabla.js","servicios/RepartidorService.js","servicios/ClienteService.js","servicios/ProductosService.js","paginas/pedidos/componentes/PedidoForm.js","paginas/pedidos/Pedidos.js","paginas/repartidores/componentes/RepartidorFila.js","paginas/repartidores/componentes/RepartidoresTabla.js","paginas/repartidores/componentes/RepartidorFormV2.js","paginas/repartidores/Repartidores.js","paginas/productos/componentes/ProductoFila.js","paginas/productos/componentes/ProductosTabla.js","paginas/productos/componentes/ProductoForm.js","paginas/productos/Productos.js","paginas/home/Home.js","componentes/Header.js","App.js","serviceWorker.js","index.js"],"names":["Cargando","tipo","texto","claseAlerta","className","role","URL_BACKEND","ClienteFila","cliente","numero","setObjCliente","useState","checked","setChecked","useEffect","cli_est","id","cli_nom","cli_ape","onChange","nuevoCliente","endpoint","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","cli_dni","onClick","ClientesTabla","clientes","map","i","key","ClienteForm","getClientes","objCliente","formVacio","formulario","setFormulario","handleChange","e","target","name","value","onSubmit","preventDefault","trim","Swal","fire","icon","title","text","showCancelButton","result","timer","putCliente","postCliente","htmlFor","type","Clientes","cargando","setCargando","setClientes","PedidoFila","pedido","setObjPedido","ped_est","id_pro","id_rep","id_cli","ped_ini","ped_fin","nuevoPedido","ped_fech","PedidosTabla","getPedidos","pedidos","RepartidorService","Promise","resolve","reject","repartidores","ClienteService","this","ProductoService","productos","formularioVacio","PedidoForm","objPedido","setRepartidores","setProductos","repService","cliService","prodService","llenarSelects","a","getAllRepartidores","getAllClientes","getAllProductos","putPedido","postPedido","producto","pro_nom","pro_prec","repartidor","rep_nom","rep_ape","Pedidos","setPedidos","llenarTabla","RepartidorFila","setObjRepartidor","rep_est","nuevoRepartidor","rep_dni","RepartidoresTabla","RepartidorFormV2","getRepartidores","objRepartidor","putRepartidor","postRepartidor","Repartidores","ProductoFila","setObjProducto","pro_est","nuevoProducto","src","pro_img","alt","width","height","ProductosTabla","ProductoForm","getProductos","objProducto","putProducto","postProducto","Productos","Home","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50ec8992.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cargando = ({ tipo, texto }) => {\r\n\r\n let claseAlerta = \"\";\r\n switch (tipo) {\r\n  case \"success\":\r\n   claseAlerta = \"alert alert-success text-center\";\r\n   break;\r\n  case \"danger\":\r\n   claseAlerta = \"alert alert-danger text-center\";\r\n   break;\r\n  case \"warning\":\r\n   claseAlerta = \"alert alert-warning text-center\";\r\n   break;\r\n  case \"info\":\r\n   claseAlerta = \"alert alert-info text-center\";\r\n   break;\r\n  default:\r\n   claseAlerta = \"alert alert-light text-center\";\r\n   break;\r\n }\r\n\r\n\r\n return (\r\n  <div className={claseAlerta} role=\"alert\">\r\n   <h4 className=\"alert-heading\">Cargando</h4>\r\n   <p>{texto}</p>\r\n   <p className=\"mb-0\"></p>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Cargando\r\n","export const URL_BACKEND = `https://5ec8650b155c130016a909e3.mockapi.io`;","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ClienteFila = ({ cliente, numero, setObjCliente }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // funcion que se conecta a la BD y cambia el estado del repartidor\r\n  const putCliente = () => {\r\n\r\n    let nuevoCliente = { ...cliente };\r\n   \r\n    nuevoCliente.cli_est = !checked + \"\";\r\n\r\n    const endpoint = `${URL_BACKEND}/cliente/${cliente.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(nuevoCliente)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        console.log(data);\r\n\r\n       \r\n        setChecked(!checked);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (cliente.cli_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{cliente.id}</td>\r\n      <td>{cliente.cli_nom}</td>\r\n      <td>{cliente.cli_ape}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putCliente} />\r\n\r\n      </td>\r\n      <td>{cliente.cli_dni}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjCliente(cliente);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ClienteFila\r\n","import React from 'react'\r\nimport ClienteFila from './ClienteFila'\r\n\r\nconst ClientesTabla = ({ clientes, setObjCliente }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido</th>\r\n          <th>Estado</th>\r\n          <th>Dni</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          clientes.map((cliente, i) => {\r\n            return <ClienteFila numero={i}\r\n              cliente={cliente}\r\n              key={cliente.id}\r\n              setObjCliente={setObjCliente} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default ClientesTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ClienteForm = ({ getClientes, objCliente, setObjCliente }) => {\r\n\r\n  let formVacio = {\r\n    cli_nom: '',\r\n    cli_ape: '',\r\n    cli_est: '',\r\n    cli_dni: ''\r\n  };\r\n\r\n\r\n\r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objCliente\");\r\n    if (objCliente) {\r\n      setFormulario(objCliente);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objCliente])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const postCliente = (nuevoCliente) => {\r\n    const endpoint = `${URL_BACKEND}/cliente`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoCliente),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Cliente ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getClientes();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putCliente = (nuevoCliente) => {\r\n    const endpoint = `${URL_BACKEND}/cliente/${objCliente.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoCliente)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        // limpiar el form\r\n        getClientes();\r\n        setObjCliente(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.cli_nom.trim() === \"\" ||\r\n      formulario.cli_ape.trim() === \"\" ||\r\n      formulario.cli_dni.trim() === \"\" ||\r\n      formulario.cli_est.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objCliente) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putCliente(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL Cliente\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postCliente(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Cliente</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"cli_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.cli_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Apellido:</label>\r\n            <input type=\"text\" name=\"cli_ape\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.cli_ape} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"cli_est\"\r\n              onChange={handleChange}\r\n              value={formulario.cli_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Dni:</label>\r\n            <input type=\"text\" name=\"cli_dni\"\r\n              className=\"form-control\"\r\n              value={formulario.cli_dni}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objCliente ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Cliente\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Cliente\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ClienteForm\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport ClientesTabla from './componentes/ClientesTabla';\r\nimport ClienteForm from './componentes/ClienteForm';\r\nconst Clientes = () => {\r\n\r\n  const endpoint = \"https://5ec8650b155c130016a909e3.mockapi.io/cliente\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [clientes, setClientes] = useState([]);\r\n\r\n \r\n  const [objCliente, setObjCliente] = useState(null);\r\n\r\n  const getClientes = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);        \r\n        setClientes(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getClientes();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          \r\n          <ClienteForm\r\n            getClientes={getClientes}\r\n            objCliente={objCliente}\r\n            setObjCliente={setObjCliente}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando Clientes\" /> :\r\n              <ClientesTabla\r\n                clientes={clientes}\r\n                setObjCliente={setObjCliente}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Clientes\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst PedidoFila = ({ pedido, numero, setObjPedido}) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // funcion que se conecta a la BD y cambia el estado del repartidor\r\n  const putPedido = () => {\r\n\r\n    let nuevoPedido = { ...pedido };\r\n    // Al nuevo repartidor le colocamos el estado contrario\r\n    // al que tiene en el componente actualmente,\r\n    // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n    // rep_est => mandamos la negacion del estado actual\r\n    // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n    // contemplando\r\n    nuevoPedido.ped_est = !checked + \"\";\r\n\r\n    const endpoint = `${URL_BACKEND}/pedido/${pedido.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(nuevoPedido)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n\r\n        // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n        // ESTADO EN LA BD\r\n        // En consecuencia, ya podemos hacer el cambio de estao local\r\n        // lo que generará un cambio visual para que el usuario\r\n        // vea el DOM actualizado.\r\n        setChecked(!checked);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (pedido.ped_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{pedido.id}</td>\r\n      <td>{pedido.id_pro}</td>\r\n      <td>{pedido.id_rep}</td>\r\n      <td>{pedido.id_cli}</td>\r\n      <td>{pedido.ped_ini}</td>\r\n      <td>{pedido.ped_fin}</td>\r\n\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putPedido} />\r\n\r\n      </td>\r\n      <td>{pedido.ped_fech}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjPedido(pedido);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default PedidoFila\r\n","import React from 'react'\r\nimport PedidoFila from './PedidoFila'\r\n\r\nconst PedidosTabla = ({getPedidos, pedidos, setObjPedido }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Producto</th>\r\n          <th>Repartidor</th>\r\n          <th>Cliente</th>\r\n          <th>Pedido ini</th>\r\n          <th>Pedido fin</th>\r\n          <th>Estado</th>\r\n          <th>Fecha</th>\r\n          <th>Acciones</th>          \r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          pedidos.map((pedido, i) => {\r\n            return <PedidoFila numero={i}\r\n              pedido={pedido}\r\n              key={pedido.id}\r\n              setObjPedido={setObjPedido} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default PedidosTabla\r\n","import { URL_BACKEND } from './../variables/variables';\r\nexport class RepartidorService {\r\n endpoint = \"/repartidor\";\r\n /**\r\n  * Funcion que trae toooooooodos los repartidores\r\n  */\r\n getAllRepartidores() {\r\n  return new Promise((resolve, reject) => {\r\n   fetch(`${URL_BACKEND}${this.endpoint}`)\r\n    .then((response) => {\r\n     response.json().then((repartidores) => {\r\n      resolve(repartidores);\r\n     })\r\n    })\r\n  })\r\n }\r\n\r\n}","import { URL_BACKEND } from \"../variables/variables\";\r\n\r\nexport class ClienteService {\r\n endpoint = '/cliente';\r\n  async getAllClientes() {\r\n  let response = await fetch(`${URL_BACKEND}${this.endpoint}`);\r\n  let clientes = await response.json();\r\n  // OJO, la funcion, por ser ASYNC, no retorna \r\n  // la lista de clientes, retorna una promesa\r\n  return clientes;\r\n   // .then((response) => {\r\n   //  response.json().then((clientes) => {\r\n   //   resolve(clientes);\r\n   //  })\r\n   // })\r\n }\r\n}","import { URL_BACKEND } from \"../variables/variables\";\r\n\r\nexport class ProductoService {\r\n endpoint = \"/producto\";\r\n async getAllProductos() {\r\n  let response = await fetch(`${URL_BACKEND}${this.endpoint}`);\r\n  let productos = await response.json();\r\n  return productos;\r\n }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { RepartidorService } from '../../../servicios/RepartidorService';\r\nimport { ClienteService } from '../../../servicios/ClienteService';\r\nimport { ProductoService } from '../../../servicios/ProductosService';\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\n\r\nconst formularioVacio = {\r\n  id_pro: \"\",\r\n  id_rep: \"\",\r\n  id_cli: \"\",\r\n  ped_ini: \"\",\r\n  ped_fin: \"\",\r\n  ped_est: \"\",\r\n  ped_fech: \"\"  \r\n}\r\n\r\nconst PedidoForm = ({getPedidos, objPedido, setObjPedido }) => {\r\n\r\n  \r\n\r\n  const [formulario, setFormulario] = useState(formularioVacio);\r\n  const [repartidores, setRepartidores] = useState([]);\r\n  const [clientes, setClientes] = useState([]);\r\n  const [productos, setProductos] = useState([]);\r\n\r\n  let repService = new RepartidorService();\r\n  let cliService = new ClienteService();\r\n  let prodService = new ProductoService();\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({\r\n      ...formulario,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (objPedido) {\r\n      setFormulario(objPedido);\r\n    } else {\r\n      setFormulario(formularioVacio)\r\n    }\r\n  }, [objPedido])\r\n\r\n  const llenarSelects = async () => {\r\n\r\n    setRepartidores(await repService.getAllRepartidores());\r\n    setClientes(await cliService.getAllClientes());\r\n    setProductos(await prodService.getAllProductos());\r\n\r\n    // let arrayRepartidores = await repService.getAllRepartidores();\r\n    // setRepartidores(arrayRepartidores);\r\n    // let arrayClientes = await cliService.getAllClientes();\r\n    // setClientes(arrayClientes);\r\n    // let arrayProductos = await prodService.getAllProductos()\r\n    // setProductos(arrayProductos);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    llenarSelects();\r\n\r\n  }, []);\r\n\r\n  const postPedido = (nuevoPedido) => {\r\n    const endpoint = `${URL_BACKEND}/pedido`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoPedido),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        //getPedido();\r\n      })\r\n    })\r\n  }\r\n// Funcion que actualiza un repartidor en la BD\r\nconst putPedido = (nuevoPedido) => {\r\n  const endpoint = `${URL_BACKEND}/pedido/${objPedido.id}`;\r\n  fetch(endpoint, {\r\n    method: 'PUT',\r\n    headers: { \"Content-type\": \"application/json\" },\r\n    body: JSON.stringify(nuevoPedido)\r\n  }).then((response) => {\r\n    response.json().then((data) => {\r\n      Swal.fire({\r\n        title: \"Actualizado!\",\r\n        text: \"Registro actualizado correctamente\",\r\n        icon: \"success\",\r\n        timer: 1500\r\n      });\r\n      // limpiar el form\r\n      //getPedidos();\r\n      setObjPedido(null);\r\n    })\r\n  })\r\n}\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n    \r\n    \r\n    if (formulario.id_pro.trim() === \"\" ||\r\n      formulario.id_rep.trim() === \"\" ||\r\n      formulario.id_cli.trim() === \"\" ||\r\n      formulario.ped_ini.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objPedido) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL Pedido\");\r\n            putPedido(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postPedido(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <h3 className=\"card-title\">Formulario de Pedidos</h3>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <form className=\"row\" onSubmit={enviarFormulario}>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Producto</label>\r\n                <select name=\"id_pro\"\r\n                  onChange={handleChange} value={formulario.id_pro}\r\n                  id=\"\" className=\"form-control\">\r\n                  {\r\n                    productos.map((producto) => {\r\n                      return (<option value={producto.id} key={producto.id}>\r\n                        {producto.pro_nom} S/.{producto.pro_prec}\r\n                      </option>)\r\n                    })\r\n                  }\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Repartidor</label>\r\n                <select name=\"id_rep\"\r\n                  onChange={handleChange} value={formulario.id_rep}\r\n                  id=\"\" className=\"form-control\">\r\n\r\n                  {\r\n                    repartidores.map((repartidor) => {\r\n                      return (<option value={repartidor.id} key={repartidor.id}>\r\n                        {repartidor.rep_nom} {repartidor.rep_ape}\r\n                      </option>)\r\n                    })\r\n                  }\r\n\r\n\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Cliente</label>\r\n                <select name=\"id_cli\"\r\n                  onChange={handleChange}\r\n                  value={formulario.id_cli}\r\n                  id=\"\" className=\"form-control\">\r\n                  {\r\n                    clientes.map((cliente) => {\r\n                      return (<option value={cliente.id} key={cliente.id}>\r\n                        {cliente.cli_nom} {cliente.cli_ape}\r\n                      </option>)\r\n                    })\r\n                  }\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Entrega Inicio</label>\r\n                <input type=\"text\" name=\"ped_ini\"\r\n                  onChange={handleChange} value={formulario.ped_ini}\r\n                  className=\"form-control\" />\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Entrega Fin</label>\r\n                <input type=\"text\" name=\"ped_fin\"\r\n                  onChange={handleChange} value={formulario.ped_fin}\r\n                  className=\"form-control\" />\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Estado</label>\r\n                <select name=\"ped_est\" onChange={handleChange}\r\n                  id=\"\" className=\"form-control\" value={formulario.ped_est}>\r\n                  <option value=\"\">Seleccione</option>\r\n                  <option value=\"\">Pedido</option>\r\n                  <option value=\"\">realizado</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Fecha</label>\r\n                <input type=\"date\" name=\"ped_fech\"\r\n                  onChange={handleChange} value={formulario.ped_fech}\r\n                  className=\"form-control\" />\r\n              </div>\r\n              <div className=\"form-group col-md-6\">\r\n                {\r\n                  objPedido ?\r\n                    <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                      Actualizar Pedido\r\n                </button> :\r\n                    <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                      Crear Pedido\r\n                </button>\r\n                }\r\n              </div>\r\n              <div className=\"form-group col-md-6\">\r\n                <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n                  Cancelar\r\n                </button>\r\n              </div>\r\n            </form>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default PedidoForm\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport Cargando from \"./../../componentes/Cargando\";\r\nimport RepartidoresTabla from \"./componentes/PedidosTabla\";\r\nimport PedidoForm from \"./componentes/PedidoForm\";\r\nimport { RepartidorService } from \"../../servicios/RepartidorService\";\r\nimport { ClienteService } from \"../../servicios/ClienteService\";\r\nimport { ProductoService } from \"../../servicios/ProductosService\";\r\n\r\nconst Pedidos = () => {\r\n  const endpoint = \"https://5ec8650b155c130016a909e3.mockapi.io/pedido\";\r\n  const [cargando, setCargando] = useState(true);\r\n\r\n  const [repartidores, setRepartidores] = useState([]);\r\n  const [clientes, setClientes] = useState([]);\r\n  const [productos, setProductos] = useState([]);\r\n\r\n  const [pedidos, setPedidos] = useState([]);\r\n\r\n  const [objPedido, setObjPedido] = useState(null);\r\n\r\n  let repService = new RepartidorService();\r\n  let cliService = new ClienteService();\r\n  let prodService = new ProductoService();\r\n\r\n  const getPedidos = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setPedidos(data);\r\n      });\r\n    });\r\n  };\r\n  const llenarTabla = async () => {\r\n    setRepartidores(await repService.getAllRepartidores());\r\n    setClientes(await cliService.getAllClientes());\r\n    setProductos(await prodService.getAllProductos());\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPedidos();\r\n    llenarTabla();\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <Fragment>\r\n      <PedidoForm \r\n      getPedidos={getPedidos}\r\n      objPedido={objPedido}\r\n      setObjPedido={setObjPedido}\r\n      />\r\n      <div className=\"row justify-content-center mt-5\">\r\n        <div className=\"col-md-8\">\r\n          {Cargando === true ? (\r\n            <Cargando tipo=\"info\" texto=\"Cargando Pedidos\" />\r\n          ) : (\r\n            <RepartidoresTabla pedidos={pedidos} setObjPedido={setObjPedido} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Pedidos;\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst RepartidorFila = ({ repartidor, numero, setObjRepartidor }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // funcion que se conecta a la BD y cambia el estado del repartidor\r\n  const putRepartidor = () => {\r\n\r\n    let nuevoRepartidor = { ...repartidor };\r\n    // Al nuevo repartidor le colocamos el estado contrario\r\n    // al que tiene en el componente actualmente,\r\n    // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n    // rep_est => mandamos la negacion del estado actual\r\n    // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n    // contemplando\r\n    nuevoRepartidor.rep_est = !checked + \"\";\r\n\r\n    const endpoint = `${URL_BACKEND}/repartidor/${repartidor.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        console.log(data);\r\n\r\n        // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n        // ESTADO EN LA BD\r\n        // En consecuencia, ya podemos hacer el cambio de estao local\r\n        // lo que generará un cambio visual para que el usuario\r\n        // vea el DOM actualizado.\r\n        setChecked(!checked);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (repartidor.rep_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{repartidor.id}</td>\r\n      <td>{repartidor.rep_nom}</td>\r\n      <td>{repartidor.rep_ape}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putRepartidor} />\r\n\r\n      </td>\r\n      <td>{repartidor.rep_dni}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjRepartidor(repartidor);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default RepartidorFila\r\n","import React from 'react'\r\nimport RepartidorFila from './RepartidorFila'\r\n\r\nconst RepartidoresTabla = ({ repartidores, setObjRepartidor }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido</th>\r\n          <th>Estado</th>\r\n          <th>Dni</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          repartidores.map((repartidor, i) => {\r\n            return <RepartidorFila numero={i}\r\n              repartidor={repartidor}\r\n              key={repartidor.id}\r\n              setObjRepartidor={setObjRepartidor} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default RepartidoresTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst RepartidorFormV2 = ({ getRepartidores, objRepartidor, setObjRepartidor }) => {\r\n\r\n  let formVacio = {\r\n    rep_nom: '',\r\n    rep_ape: '',\r\n    rep_est: '',\r\n    rep_dni: ''\r\n  };\r\n\r\n\r\n\r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objRepartidor\");\r\n    if (objRepartidor) {\r\n      setFormulario(objRepartidor);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objRepartidor])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const postRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/repartidor`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoRepartidor),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getRepartidores();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/repartidor/${objRepartidor.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        // limpiar el form\r\n        getRepartidores();\r\n        setObjRepartidor(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.rep_nom.trim() === \"\" ||\r\n      formulario.rep_ape.trim() === \"\" ||\r\n      formulario.rep_dni.trim() === \"\" ||\r\n      formulario.rep_est.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objRepartidor) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putRepartidor(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postRepartidor(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Repartidor</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"rep_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.rep_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Apellido:</label>\r\n            <input type=\"text\" name=\"rep_ape\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.rep_ape} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"rep_est\"\r\n              onChange={handleChange}\r\n              value={formulario.rep_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Dni:</label>\r\n            <input type=\"text\" name=\"rep_dni\"\r\n              className=\"form-control\"\r\n              value={formulario.rep_dni}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objRepartidor ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Repartidor\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Repartidor\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RepartidorFormV2\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport RepartidoresTabla from './componentes/RepartidoresTabla';\r\nimport RepartidorForm from './componentes/RepartidorForm';\r\nimport RepartidorFormV2 from './componentes/RepartidorFormV2';\r\nimport RepartidorFormV3 from './componentes/RepartidorFormV3';\r\nconst Repartidores = () => {\r\n\r\n  const endpoint = \"https://5ec8650b155c130016a909e3.mockapi.io/repartidor\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [repartidores, setRepartidores] = useState([]);\r\n\r\n  // objRepartidor es una variable de estado, la cual va a contener \r\n  // un objeto de tipo repartidor sí y sólo si, queremos editar \r\n  // a un repartidor, en caso contrario su valor será null\r\n  const [objRepartidor, setObjRepartidor] = useState(null);\r\n\r\n  const getRepartidores = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setRepartidores(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getRepartidores();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {/* <RepartidorForm\r\n            getRepartidores={getRepartidores}\r\n            objRepartidor={objRepartidor}\r\n            setObjRepartidor={setObjRepartidor}\r\n          /> */}\r\n          <RepartidorFormV2\r\n            getRepartidores={getRepartidores}\r\n            objRepartidor={objRepartidor}\r\n            setObjRepartidor={setObjRepartidor}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando repartidores\" /> :\r\n              <RepartidoresTabla\r\n                repartidores={repartidores}\r\n                setObjRepartidor={setObjRepartidor}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Repartidores\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ProductoFila = ({ producto, numero, setObjProducto }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // funcion que se conecta a la BD y cambia el estado del repartidor\r\n  const putProducto = () => {\r\n\r\n    let nuevoProducto = { ...producto };\r\n   \r\n    nuevoProducto.pro_est = !checked + \"\";\r\n\r\n    const endpoint = `${URL_BACKEND}/producto/${producto.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(nuevoProducto)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        console.log(data);\r\n\r\n       \r\n        setChecked(!checked);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (producto.pro_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{producto.id}</td>\r\n      <td>{producto.pro_nom}</td>\r\n      <td>{producto.pro_prec}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putProducto} />\r\n\r\n      </td>\r\n      \r\n      <td ><img src={producto.pro_img} alt=\"\" width=\"200px\" height=\"200px\"/></td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjProducto(producto);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ProductoFila\r\n","import React from 'react'\r\nimport ProductoFila from './ProductoFila'\r\n\r\nconst ProductosTabla = ({ productos, setObjProducto }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Precio</th>\r\n          <th>Estado</th>\r\n          <th>imagen</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          productos.map((producto, i) => {\r\n            return <ProductoFila numero={i}\r\n              producto={producto}\r\n              key={producto.id}\r\n              setObjProducto={setObjProducto} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default ProductosTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ProductoForm = ({ getProductos, objProducto, setObjProducto}) => {\r\n\r\n  let formVacio = {\r\n    pro_nom: '',\r\n    pro_prec: '',\r\n    pro_est: '',\r\n    pro_img: ''\r\n  };\r\n\r\n\r\n\r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objProducto\");\r\n    if (objProducto) {\r\n      setFormulario(objProducto);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objProducto])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const postProducto = (nuevoProducto) => {\r\n    const endpoint = `${URL_BACKEND}/producto`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoProducto),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Producto ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getProductos();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putProducto = (nuevoProducto) => {\r\n    const endpoint = `${URL_BACKEND}/producto/${objProducto.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoProducto)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        // limpiar el form\r\n        getProductos();\r\n        setObjProducto(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.pro_nom.trim() === \"\" ||\r\n      formulario.pro_prec.trim() === \"\" ||\r\n      formulario.pro_img.trim() === \"\" ||\r\n      formulario.pro_est.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objProducto) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL Producto\");\r\n            putProducto(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL Producto\");\r\n          \r\n            postProducto(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Producto</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"pro_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.pro_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Precio:</label>\r\n            <input type=\"number\" name=\"pro_prec\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.pro_prec} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"pro_est\"\r\n              onChange={handleChange}\r\n              value={formulario.pro_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Imagen:</label>\r\n            <input type=\"text\" name=\"pro_img\"\r\n              className=\"form-control\"\r\n              value={formulario.pro_img}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objProducto ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Producto\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Producto\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductoForm\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport ProductosTabla from './componentes/ProductosTabla';\r\nimport ProductoForm from './componentes/ProductoForm';\r\nconst Productos = () => {\r\n\r\n  const endpoint = \"https://5ec8650b155c130016a909e3.mockapi.io/producto\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [productos, setProductos] = useState([]);\r\n\r\n \r\n  const [objProducto, setObjProducto] = useState(null);\r\n\r\n  const getProductos = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);        \r\n        setProductos(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getProductos();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          \r\n          <ProductoForm\r\n            getProductos={getProductos}\r\n            objProducto={objProducto}\r\n            setObjProducto={setObjProducto}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando Productos\" /> :\r\n              <ProductosTabla\r\n                productos={productos}\r\n                setObjProducto={setObjProducto}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Productos","import React from 'react'\r\n\r\nconst Home = () => {\r\n return (\r\n  <div>\r\n   Home\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n return (\r\n  <header>\r\n   <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\r\n    <a className=\"navbar-brand\" href=\"!#\">Pedidos</a>\r\n    <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n     aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n    <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n     <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n      <li className=\"nav-item active\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a> */}\r\n       <Link to={\"/clientes\"} className=\"nav-link\">Clientes</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/productos\"} className=\"nav-link\">Productos</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/pedidos\"} className=\"nav-link\">Pedidos</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/repartidores\"} className=\"nav-link\">Repartidores</Link>\r\n      </li>\r\n     </ul>\r\n    </div>\r\n   </nav>\r\n  </header>\r\n )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport {\r\n  Route,\r\n  BrowserRouter as Router,\r\n  Switch\r\n} from 'react-router-dom';\r\n\r\nimport Clientes from './paginas/clientes/Clientes';\r\nimport Pedidos from './paginas/pedidos/Pedidos';\r\nimport Repartidores from './paginas/repartidores/Repartidores';\r\nimport Productos from './paginas/productos/Productos';\r\nimport Home from './paginas/home/Home';\r\nimport Header from './componentes/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n\r\n      <Header />\r\n\r\n      <main className=\"container-fluid pt-3\">\r\n        <Switch>\r\n          <Route path={\"/clientes\"} component={Clientes} />\r\n          <Route path={\"/pedidos\"} component={Pedidos} />\r\n          <Route path={\"/repartidores\"} component={Repartidores} />\r\n          <Route path={\"/productos\"} component={Productos} />\r\n          <Route path={\"/\"} component={Home} />\r\n        </Switch>\r\n      </main>\r\n\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}